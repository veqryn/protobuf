// Code generated by protoc-gen-go. DO NOT EDIT.
// source: veqryn/protobuf/ptypes/test/test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	timestamp "github.com/veqryn/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimestampReq struct {
	MyTime               *timestamp.Timestamp `protobuf:"bytes,1,opt,name=my_time,json=myTime,proto3" json:"my_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimestampReq) Reset()         { *m = TimestampReq{} }
func (m *TimestampReq) String() string { return proto.CompactTextString(m) }
func (*TimestampReq) ProtoMessage()    {}
func (*TimestampReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffedd2e9d4625b, []int{0}
}

func (m *TimestampReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimestampReq.Unmarshal(m, b)
}
func (m *TimestampReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimestampReq.Marshal(b, m, deterministic)
}
func (m *TimestampReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampReq.Merge(m, src)
}
func (m *TimestampReq) XXX_Size() int {
	return xxx_messageInfo_TimestampReq.Size(m)
}
func (m *TimestampReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampReq.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampReq proto.InternalMessageInfo

func (m *TimestampReq) GetMyTime() *timestamp.Timestamp {
	if m != nil {
		return m.MyTime
	}
	return nil
}

type TimestampResp struct {
	MyTime               *timestamp.Timestamp `protobuf:"bytes,1,opt,name=my_time,json=myTime,proto3" json:"my_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimestampResp) Reset()         { *m = TimestampResp{} }
func (m *TimestampResp) String() string { return proto.CompactTextString(m) }
func (*TimestampResp) ProtoMessage()    {}
func (*TimestampResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ffedd2e9d4625b, []int{1}
}

func (m *TimestampResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimestampResp.Unmarshal(m, b)
}
func (m *TimestampResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimestampResp.Marshal(b, m, deterministic)
}
func (m *TimestampResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampResp.Merge(m, src)
}
func (m *TimestampResp) XXX_Size() int {
	return xxx_messageInfo_TimestampResp.Size(m)
}
func (m *TimestampResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampResp.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampResp proto.InternalMessageInfo

func (m *TimestampResp) GetMyTime() *timestamp.Timestamp {
	if m != nil {
		return m.MyTime
	}
	return nil
}

func init() {
	proto.RegisterType((*TimestampReq)(nil), "veqryn.protobuf.ptypes.test.TimestampReq")
	proto.RegisterType((*TimestampResp)(nil), "veqryn.protobuf.ptypes.test.TimestampResp")
}

func init() {
	proto.RegisterFile("veqryn/protobuf/ptypes/test/test.proto", fileDescriptor_92ffedd2e9d4625b)
}

var fileDescriptor_92ffedd2e9d4625b = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x4b, 0x2d, 0x2c,
	0xaa, 0xcc, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x28, 0xa9, 0x2c,
	0x48, 0x2d, 0xd6, 0x2f, 0x49, 0x2d, 0x2e, 0x01, 0x13, 0x7a, 0x60, 0x19, 0x21, 0x69, 0x88, 0x3a,
	0x3d, 0x98, 0x3a, 0x3d, 0x88, 0x3a, 0x3d, 0x90, 0x12, 0x29, 0x79, 0x74, 0x43, 0x4a, 0x32, 0x73,
	0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x20, 0xea, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52,
	0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a,
	0xa1, 0xb2, 0x3a, 0x60, 0x2a, 0x59, 0x37, 0x3d, 0x35, 0x4f, 0xb7, 0xb8, 0x3c, 0x31, 0x3d, 0x3d,
	0xb5, 0x48, 0x3f, 0xbf, 0x00, 0xac, 0x02, 0x53, 0xb5, 0x92, 0x33, 0x17, 0x4f, 0x08, 0xcc, 0xf8,
	0xa0, 0xd4, 0x42, 0x21, 0x63, 0x2e, 0xf6, 0xdc, 0xca, 0x78, 0x90, 0x8d, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xdc, 0x46, 0x52, 0x7a, 0xe8, 0x6e, 0x45, 0xa8, 0x67, 0xcb, 0xad, 0x04, 0x71, 0x94, 0x5c,
	0xb8, 0x78, 0x91, 0x0c, 0x29, 0x2e, 0x20, 0xcb, 0x14, 0xa3, 0xc9, 0x8c, 0x5c, 0xec, 0x21, 0xa9,
	0xc5, 0x25, 0x8e, 0x01, 0x9e, 0x42, 0xed, 0x8c, 0x5c, 0x9c, 0x70, 0x15, 0x42, 0x9a, 0x7a, 0x78,
	0xc2, 0x4b, 0x0f, 0xd9, 0xfd, 0x52, 0x5a, 0xc4, 0x2a, 0x2d, 0x2e, 0x50, 0x52, 0x6e, 0xba, 0xfc,
	0x64, 0x32, 0x93, 0xac, 0x10, 0x17, 0x22, 0x84, 0xa3, 0xf8, 0x95, 0x90, 0x78, 0x56, 0x8c, 0x5a,
	0x4e, 0x1a, 0x51, 0x6a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x78,
	0xe2, 0x37, 0x89, 0x0d, 0x2c, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x60, 0x2a, 0x61,
	0x05, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestAPIClient interface {
	Timestamp(ctx context.Context, in *TimestampReq, opts ...grpc.CallOption) (*TimestampResp, error)
}

type testAPIClient struct {
	cc *grpc.ClientConn
}

func NewTestAPIClient(cc *grpc.ClientConn) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) Timestamp(ctx context.Context, in *TimestampReq, opts ...grpc.CallOption) (*TimestampResp, error) {
	out := new(TimestampResp)
	err := c.cc.Invoke(ctx, "/veqryn.protobuf.ptypes.test.TestAPI/Timestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServer is the server API for TestAPI service.
type TestAPIServer interface {
	Timestamp(context.Context, *TimestampReq) (*TimestampResp, error)
}

// UnimplementedTestAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (*UnimplementedTestAPIServer) Timestamp(ctx context.Context, req *TimestampReq) (*TimestampResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timestamp not implemented")
}

func RegisterTestAPIServer(s *grpc.Server, srv TestAPIServer) {
	s.RegisterService(&_TestAPI_serviceDesc, srv)
}

func _TestAPI_Timestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimestampReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).Timestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veqryn.protobuf.ptypes.test.TestAPI/Timestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).Timestamp(ctx, req.(*TimestampReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veqryn.protobuf.ptypes.test.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Timestamp",
			Handler:    _TestAPI_Timestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veqryn/protobuf/ptypes/test/test.proto",
}
